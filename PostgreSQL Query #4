-- Right JOIN
-- Products returned without a given reason
SELECT
	ord.order_id, -- <tablename>.<columnname> to fully qualify so the SELECT knows where to pull the data from
	rtn.reason_returned
FROM orders ord
RIGHT JOIN returns rtn ON ord.order_id = rtn.order_id  -- Everything in returns and what matches in orders based on order_id
WHERE rtn.reason_returned = 'Not Given'
;
-- Right JOIN Converted to a LEFT
-- Products returned without a given reason
SELECT
	ord.order_id, -- <tablename>.<columnname> to fully qualify so the SELECT knows where to pull the data from
	rtn.reason_returned
FROM returns rtn
LEFT JOIN orders ord  ON ord.order_id = rtn.order_id  -- Everything in returns and what matches in orders based on order_id
WHERE rtn.reason_returned = 'Not Given'
;
-- Exception JOIN
-- Find products that have not sold in 2020
-- Find the products available for sale
SELECT product_id
FROM products
EXCEPT
-- Find the products that have sold in 2020
SELECT DISTINCT product_id
FROM orders
WHERE DATE_PART('year', order_date) = 2020
;
-- Finding NULLS
-- Find orders with no postal code
SELECT
	order_id,
	postal_code
FROM orders
WHERE postal_code IS NULL   -- finds missing/null values in postal code column
	  OR postal_code = '' -- finds any blanks as well as nulls
;
-- Finding values that are NOT NULLS
-- Find orders with postal code
SELECT
	order_id,
	postal_code
FROM orders
WHERE postal_code IS NOT NULL   -- finds valid postals values
	  OR postal_code <> '' -- finds any that are not blanks as well as nulls
;
-- Find the number of sales by sales rep for orders that are NOT returned
SELECT
	salesperson,
	COUNT(*) as num_orders_by_rep -- this count will exclude returns
FROM orders ord
	LEFT JOIN returns rtn  ON ord.order_id = rtn.order_id
	JOIN regions rgn ON ord.region_id = rgn.region_id
WHERE rtn.order_id IS NULL -- remove any order_ids where there is a return because
GROUP BY 1
;
-- NULLIF; helpful to use to avoid divide by zero errors
SELECT
	product_id,
	quantity,
	discount,
	NULLIF(discount,0) as make_zero_null,
	quantity/NULLIF(discount,0) as disc_per_item
FROM orders
WHERE discount = 0 -- use to test NULLIF
;
-- CASE Statement to avoid divide by zero errors
SELECT
	product_id,
	quantity,
	discount,
	CASE WHEN discount = 0 THEN NULL
		ELSE quantity / discount
	END as disc_per_item,
	CASE WHEN discount IS NULL THEN 0
		ELSE quantity + discount
	END as example_set_null_to_zero  -- cannot add nulls, so default to zero
FROM orders
WHERE discount = 0 -- use to test CASE for divide by zero
;
-- COALESCE to assign a value when the field is null
SELECT
	order_id,
	postal_code,
	region_id,
	COALESCE(postal_code,region_id::text,'none') as new_postal_value
FROM orders
-- WHERE postal_code IS NULL AND region_id IS NULL  -- used for testing
;
-- Type 1 Subquery
-- Calculate the average monthly sales by year
SELECT
	DATE_PART('year',order_month) as order_year,
	AVG(monthly_sales) as avg_monthly_sales
FROM
	(
		-- Calculate the average monthly sales
		SELECT
			DATE_TRUNC('month', order_date) as order_month,
			SUM(sales) as monthly_sales
		FROM orders
		GROUP BY 1 -- groups by the DATE_TRUNC
		ORDER BY 1
	) temp_tbl
GROUP BY 1
ORDER BY 1
;
-- Type 1 Subquery
-- Categorize customers by purchase frequency then get total sales by the categories
SELECT
	customer_type,
	SUM(total_sales_by_customer) as total_sales_by_type		
FROM ( -- Categorize customers
			SELECT customer_id,
			CASE WHEN COUNT(DISTINCT order_id) >=1000 THEN 'Suppliers'
			WHEN COUNT(DISTINCT order_id) >=100 THEN 'Frequent'
			ELSE 'All Others' END as customer_type,
			SUM(sales) as total_sales_by_customer
			FROM orders
			GROUP BY 1
		) as temp_tbl
GROUP BY customer_type
;

-- Type Subquery; using in an IN operator
-- Number of orders for products with a cost to consumer > 500
SELECT COUNT(*) as num_orders
FROM orders
WHERE product_id IN
		(
			SELECT product_id
			FROM products
			WHERE product_cost_to_consumer > 500
		);
    -- Type Subquery; using in an NOT IN operator
-- Number of orders for products with a cost to consumer <= 500
SELECT COUNT(*) as num_orders
FROM orders
WHERE product_id NOT IN
		(
			SELECT product_id
			FROM products
			WHERE product_cost_to_consumer > 500
		);
    -- Type 3 Subquery;evaluate based on a aggregated value
-- The number of orders that have a profit > the average cost to consumer
SELECT COUNT(*) as num_orders
FROM orders
WHERE profit >
		( -- calculate AVG cost to consumer
			SELECT AVG(product_cost_to_consumer)::INT as cost_as_integer
			FROM products
		)
;
SELECT
	customer_type,
	SUM(total_sales_by_customer) as total_sales_by_type		
FROM ( -- Categorize customers
			SELECT customer_id,
			CASE WHEN COUNT(DISTINCT order_id) >=1000 THEN 'Suppliers'
			WHEN COUNT(DISTINCT order_id) >=100 THEN 'Frequent'
			ELSE 'All Others' END as customer_type,
			SUM(sales) as total_sales_by_customer
			FROM orders
			GROUP BY 1
		) as temp_tbl
GROUP BY customer_type
;
-- Calculate % of sales
SELECT
	customer_type,
	SUM(total_sales_by_customer) as total_sales_by_type,
	(SELECT SUM(sales) FROM orders) as total_sales_all_rows,
	ROUND((SUM(total_sales_by_customer) / (SELECT SUM(sales) FROM orders)) *100 ,2)  as share_of_sales
FROM ( -- Categorize customers
			SELECT customer_id,
			CASE WHEN COUNT(DISTINCT order_id) >=1000 THEN 'Suppliers'
			WHEN COUNT(DISTINCT order_id) >=100 THEN 'Frequent'
			ELSE 'All Others' END as customer_type,
			SUM(sales) as total_sales_by_customer
			FROM orders
			GROUP BY 1
		) as temp_tbl
GROUP BY customer_type
;
-- CASE Statement subquery to create buckets
SELECT profit_size, COUNT(*) as num_orders
FROM
		( -- Classify to profits
			SELECT order_id, profit,
			CASE WHEN profit >= 1000 THEN 'large'
				 WHEN profit >= 50 THEN 'Medium'
				 ELSE 'small'
			END as profit_size
			FROM orders
		) as temp_tbl
GROUP BY profit_size;
-- CASE Statement subquery to binary values (true/false)
-- Percent of Discounts that are more than 25%
SELECT products.category,
	AVG(temp_tbl.over_25) as pct_over_25
FROM
	( -- assign a 1 or 0 to each row id it meets the criteria
		SELECT
		product_id,
		discount, -- use this to test CASE
		CASE WHEN discount > .25 THEN 1 -- 1 = True
		ELSE 0 -- zero = False
		END as over_25
		FROM orders
	) as temp_tbl
JOIN products ON temp_tbl.product_id = products.product_id  -- to join to another table the subquery must have the key to use in the JOIN
GROUP BY 1
;
-- Use a CTE Example
-- Percent of Discounts that are more than 25%
WITH cte_discount AS
	( -- assign a 1 or 0 to each row id it meets the criteria
		SELECT
		product_id,
		discount, -- use this to test CASE
		CASE WHEN discount > .25 THEN 1 -- 1 = True
		ELSE 0 -- zero = False
		END as over_25
		FROM orders
	)
SELECT products.category,
	AVG(cte_discount.over_25) as pct_over_25
FROM cte_discount  -- use CTE name as table here
JOIN products ON cte_discount.product_id = products.product_id  -- to join to another table the subquery must have the key to use in the JOIN
GROUP BY 1
;
-- Use a CTE Example
-- orders with a return reason does not equal Not Given
WITH cte_returns AS
	(
		SELECT order_id, reason_returned
		FROM returns
		WHERE reason_returned NOT LIKE '%Not Given%'
	)
	, -- multiple CTEs are separated by a comma
	cte_orders AS
	(
		SELECT order_id, sales
		FROM orders
	)
SELECT rtn.reason_returned, sum(sales) as returned_sales
FROM cte_returns rtn
JOIN cte_orders ord ON rtn.order_id = ord.order_id
GROUP BY 1;
